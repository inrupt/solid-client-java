Web Applications

    A very common pattern for building Solid apps involves operating them as Web Applications in which different users are able to login with a Web Browser.

    Most Java-based Web Applications will use a framework, such as {{{https://spring.io/}Spring Boot}}, {{{https://quarkus.io/}Quarkus}}
    or {{{https://micronaut.io/}Micronaut}}. Each of these frameworks already provides an OpenID Connect Authentication integration. These frameworks
    will expect a <<<client_id>>> value and the URL of an authorization server. There will typically be other configuration properties, but this guide focuses
    on these two values.

    If you are using Inrupt's Open ID Provider, the authorization server URL will be <<<https://login.inrupt.com>>>.

    For the <<<client_id>>>, you will use a "public client", which does not need authentication. For this, you can either create your own
    "{{{https://solidproject.org/TR/oidc#clientids-document}Client Identifier document}}", and make this available in a public location on the Web. Ensure that the URL of this resource is exactly
    the same as the <<<client_id>>> property of the document. Below is an example of a Client Identifier document.

+---
{
  "@context": [
    "https://www.w3.org/ns/solid/oidc-context.jsonld"
  ],
  "client_id": "https://application.example/identifier.jsonld",
  "client_name": "My First Solid Application",
  "client_uri": "https://application.example/",
  "redirect_uris": [
    "https://application.example/callback"
  ],
  "post_logout_redirect_uris": [
    "https://application.example/"
  ]
}
+---

    Alternatively, if you plan to run your application at <<<http://localhost:8080/>>> you can use a special Client Id
    for testing at <<<https://inrupt.github.io/solid-client-java/clients/testing.jsonld>>>.

    For this example, assume that your application will run at the URL <<<https://application.example/>>> (and for development at <<<http://localhost:8080/>>>)

    Using the {{{https://openid.net/connect/}OpenID Connect}} extension for the relevant framework, it will be possible to get a raw ID Token. This is all that is needed by
    the Inrupt Java Client. In particular, the <<<com.inrupt.client.openid.OpenIdSession.ofIdToken(String)>>> method will be used in this scenario.

    For example, with Quarkus, your code might look like this:

+---
import com.inrupt.client.auth.Session;
import com.inrupt.client.openid.OpenIdSession;
import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import org.eclipse.microprofile.jwt.JsonWebToken;
import io.quarkus.oidc.IdToken;

@ApplicationScoped
public class MyEndpoint {

    @Inject
    @IdToken
    JsonWebToken idToken;

    @GET
    @Path("/")
    public MyDataResource fetch() {
        Session session = OpenIdSession.ofIdToken(idToken.getRawToken());
        ...
    }
}
+---

    With Spring Boot, your code might look like this:

+---
import com.inrupt.client.auth.Session;
import com.inrupt.client.openid.OpenIdSession;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.oauth2.core.oidc.user.OidcUser;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class Endpoint {

    @GetMapping("/")
    public MyDataResource fetch(@AuthenticationPrincipal OidcUser principal) {
        Session session = OpenIdSession.ofIdToken(principal.getIdToken().getTokenValue());
        ...
    }

}
+---

    In both cases, a <<<Session>>> object is created by passing the value of the OpenID Connect ID Token to
    the <<<OpenIdSession::ofIdToken>>> method.

* Next Steps

    If you are using one of the high-level clients and you have a working <<<Session>>> object, you can move on to the {{{./data-modeling.html}data modeling}} section, which describes how to bind Java objects to RDF resources.