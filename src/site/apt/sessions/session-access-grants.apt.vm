Access Grants

    {{{https://docs.inrupt.com/ess/latest/security/access-requests-grants/}Access Grants}} provide an alternative way to give access to your Solid resources. The Inrupt Java Client Libraries
    provide tooling for working with Access Grants.

    To use {{{https://docs.inrupt.com/ess/latest/security/access-requests-grants/}Access Grants}}, the resources one wants to access must have an {{{https://docs.inrupt.com/ess/latest/security/access-requests-grants/#access-grants-acp}access control policy (ACP) that enables the use of access grants}} and the Authorization Service must be able to exchange an access grant for a token (for example such as a {{{https://docs.inrupt.com/ess/latest/services/service-uma/}UMA Service}}).

* ACP that enables the use of Access Grants

    One needs to edit the ACP of the resource the access grant will be used for. 
    
** Manually adding triples to ACP
    
    This can be done manually by using a resource management interface such as {{{https://podpro.dev/} Pod Pro}}.

    The next example contains a new access control that matches <<<http://www.w3.org/ns/solid/vc#SolidAccessGrant>>>> and allows Read and Write access to a Solid Container and its contents. 

+---
prefix acp: <http://www.w3.org/ns/solid/acp#>
prefix acl: <http://www.w3.org/ns/auth/acl#>

# ACR for a Solid Container
<>
        a acp:AccessControlResource ;
        # Add access control for the container itself
        acp:accessControl <#newAccessControl> ;
        # Add access control for contained resources
        acp:memberAccessControl <#newAccessControl> .

<#newAccessControl>
        a acp:AccessControl ;
        # The access control applies one policy
        acp:apply <#newPolicy> .

<#newPolicy>
        a acp:Policy ;
        # The policy requires one matcher to be satisfied
        acp:allOf <#newMatcher> ;
        # The policy grants read and write when its matcher is satisfied
        acp:allow acl:Read, acl:Write .

<#newMatcher>
        a acp:Matcher ;
        # The matcher is satisfied if a VC of type Solid Access Grant was presented
        acp:vc <http://www.w3.org/ns/solid/vc#SolidAccessGrant> .
+---

** Adding triples to ACP in code

    One can write the above triples to an ACL auxiliary resource using code. The following code adds to an existing ACP resource a new access control that matches for <<<http://www.w3.org/ns/solid/vc#SolidAccessGrant>>> and allows Read and Write over its Solid Resource. We are using only the <<<http://www.w3.org/ns/solid/acp#accessControl>>> predicate in the <<<AccessControlResource>>>, so contained resources are not affected.

+---
import com.inrupt.client.Headers;
import com.inrupt.client.Request;
import com.inrupt.client.Response;
import com.inrupt.client.solid.SolidSyncClient;
import com.inrupt.client.spi.RDFFactory;
import com.inrupt.client.util.URIBuilder;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.rdf.api.Dataset;
import org.apache.commons.rdf.api.IRI;
import org.apache.commons.rdf.api.Literal;
import com.inrupt.client.vocabulary.ACP;
import com.inrupt.client.vocabulary.ACL;

SolidSyncClient authClient = client.session(session);
List<URI> acp = new ArrayList<>();

IRI ACPallOf = rdf.createIRI(ACP.allOf.toString());
IRI ACPvc = rdf.createIRI(ACP.vc.toString());
IRI ACPallow = rdf.createIRI(ACP.allow.toString());
IRI ACPapply = rdf.createIRI(ACP.apply.toString());
IRI ACPaccessControl = rdf.createIRI(ACP.accessControl.toString());
IRI ACLRead = rdf.createIRI(ACL.Read.toString());
IRI ACLWrite = rdf.createIRI(ACL.Write.toString());

// find the acl Link in the header of the resource
Request req = Request.newBuilder(sharedTextFileURI)
        .HEAD()
        .build();
Response<Void> res = authClient.send(req, Response.BodyHandlers.discarding());
res.headers().allValues("Link").stream()
    .flatMap(l -> Headers.Link.parse(l).stream())
    .forEach(link -> {
        if (link.getParameter("rel").contains("acl")) {
            acp.add(link.getUri());
        }
    });

// add the triples needed for access grant
if (!acp.isEmpty()) {
    URI oneAcp = acp.get(0);
    IRI acpResource = rdf.createIRI(oneAcp.toString());
    Dataset dataset = rdf.createDataset();
    //read the existing triples and add them to the dataset
    try (SolidRDFSource resource = authClient.read(oneAcp, SolidRDFSource.class)) {
        resource.stream().forEach(dataset::add);
    }

    //creating a new matcher
    URI newMatcherURI = URIBuilder.newBuilder(oneAcp).fragment("newMatcher").build();
    IRI newMatcher = rdf.createIRI(newMatcherURI.toString());
    IRI solidAccessGrant = rdf.createIRI("http://www.w3.org/ns/solid/vc#SolidAccessGrant");

    dataset.add(rdf.createQuad(acpResource, newMatcher, ACPvc, solidAccessGrant));

    //create a new policy
    URI newPolicyURI = URIBuilder.newBuilder(oneAcp).fragment("newPolicy").build();
    IRI newPolicy = rdf.createIRI(newPolicyURI.toString());

    dataset.add(rdf.createQuad(acpResource, newPolicy, ACPallOf, newMatcher));
    dataset.add(rdf.createQuad(acpResource, newPolicy, ACPallow, ACLRead));
    dataset.add(rdf.createQuad(acpResource, newPolicy, ACPallow, ACLWrite));

    //creating a new access control
    URI newAccessControlURI = URIBuilder.newBuilder(oneAcp).fragment("newAccessControl").build();
    IRI newAccessControl = rdf.createIRI(newAccessControlURI.toString());

    dataset.add(rdf.createQuad(acpResource, newAccessControl, ACPapply, newPolicy));

    //adding the new access control to the ACP
    dataset.add(rdf.createQuad(acpResource, acpResource, ACPaccessControl, newAccessControl));

    try (SolidRDFSource updatedAcp = new SolidRDFSource(oneAcp, dataset)) {
        authClient.update(updatedAcp);
    }
}
+---


* Access Grant-based sessions

    Access Grant-based sessions are more complicated than OpenId-based sessions in that an Access Grant session <also> requires an OpenId session. This is best illustrated with an example:

+---
import com.inrupt.client.accessgrant.AccessGrant;
import com.inrupt.client.accessgrant.AccessGrantSession;
import com.inrupt.client.auth.Session;
import com.inrupt.client.openid.OpenIdSession;
import com.inrupt.client.solid.SolidSyncClient;
import java.io.IOException;
import java.io.InputStream;

public class MyApplication {

    SolidSyncClient client;

    void init() throws IOException {
        try (InputStream grant = MyApplication.class.getResourceAsStream("/access-grant.json")) {
            // Parse Access Grant
            AccessGrant accessGrant = AccessGrant.ofAccessGrant(grant);

            // Set up OpenId Session
            Session openid = OpenIdSession.ofClientCredentials(issuer, clientId, clientSecret, authMethod);

            // Set up Access Grant Session
            Session session = AccessGrantSession.ofAccessGrant(openid, accessGrant);

            client = SolidSyncClient.getClient().session(session);
        }
    }
}
+---

    In this case, if you have an existing Access Grant, you can create a <<<Session>>> that uses an OpenID-based session with these Access Grants.

* Next Steps

    If you are using one of the high-level clients and you have a working <<<Session>>> object, you can move on to the {{{./data-modeling.html}data modeling}} section, which describes how to bind Java objects to RDF resources.