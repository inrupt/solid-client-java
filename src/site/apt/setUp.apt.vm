Set Up

    The Inrupt Java Client Libraries are available on {{{https://search.maven.org/}Maven Central}}. 
    The easiest way to get started involves adding the Inrupt Java Client Libraries BOM to your project's POM by adding the following:

----------------------
<dependencyManagement>
    <dependencies>
        <dependency>
        <groupId>com.inrupt</groupId>
        <artifactId>inrupt-client-bom</artifactId>
        <version>${inrupt.client.version}</version>
        </dependency>
    </dependencies>
</dependencyManagement>
----------------------

    Next, decide which modules are added to your own project's POM for dedicated functionalities. For details on each module, please check the table in the {{{https://inrupt.github.io/solid-client-java/}Home}} page.

* Selectively installing modules

    The core layer modules offer duplicate functionalities because they make use of different underlying libraries. You will have to choose which exact libraries you want to make use of and add its according module. If one adds both modules, for the HTTP client for example, it is not guaranteed which exact one is going to be loaded first from the classpath.
    Choices can be made for the HTTP service, JSON and RDF processing. The following choices are available:

*-------------------------*---------------------*---------------------*
|| HTTP     | <<RDF>> | <<JSON>> |
*-------------------------*----------------------*-----------------------*
| inrupt-client-httpclient | inrupt-client-jena  | inrupt-client-jackson |
*--------------------------*---------------------*-----------------------*         
| inrupt-client-okhttp     | inrupt-client-rdf4j | inrupt-client-jsonb   |
*--------------------------*---------------------*-----------------------*                          
    
** Authentication
    
    Select any number of authentication providers:

*----------------------*
|| Authentication      | 
*----------------------*
| inrupt-client-openid |
*----------------------*
| inrupt-client-uma    |
*----------------------*

** Domain-specific modules
    
    Once the core layer modules have been selected, it is optional if one wants to add further domain-specific layer modules such as solid or webid. 
    The domain-specific layer modules expose further abstractions on how to directly work with solid concepts. These functionalities can be implemented also through the core modules by working directly with the available libraries (RDF4J or JENA and so on), or one can create their own domain-specific abstractions.

*----------------------*
|| Domain modules      | 
*----------------------*
| inrupt-client-webid  |
*----------------------*
| inrupt-client-solid  |
*----------------------*

** Example

----------------------
<dependency>
  <groupId>com.inrupt</groupId>
  <artifactId>inrupt-client-solid</artifactId>
</dependency>
<dependency>
  <groupId>com.inrupt</groupId>
  <artifactId>inrupt-client-jena</artifactId>
</dependency>
<dependency>
  <groupId>com.inrupt</groupId>
  <artifactId>inrupt-client-httpclient</artifactId>
</dependency>
<dependency>
  <groupId>com.inrupt</groupId>
  <artifactId>inrupt-client-jackson</artifactId>
</dependency>
<dependency>
  <groupId>com.inrupt</groupId>
  <artifactId>inrupt-client-openid</artifactId>
</dependency>
----------------------

* Developing own domain-specific abstractions

    The {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/package-summary.html}api module}} of the Java Client Libraries uses the Service Provider Interface to make use of dedicated implementations loaded on the classpath. While the core layer offers options for HTTP client, RDF and JSON processing, one can also add own such implementations. 

    For example, to make use of another HTTP client, the new class needs to implement the HttpService interface available from the api module. Make sure not to load any other <<<HttpService>>> module on the classpath and the new HTTP client implementation will be loaded by the Service Provider instead. The same applies for JSON and RDF processing as well.

    Authentication and authorization also make use of the Service Provider Interface. There is a dedicated <<<OpenIdAuthenticationProvider>>> and a <<<UmaAuthenticationProvider>>> which extend the <<<AuthenticationProvider>>> interface. Furthermore, the {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/auth/package-summary.html}auth api module}} interfaces can further assist with authentication and authorization concepts.