Getting Started

    An app developer will first need to consider how a user creates an authenticated session. Depending on the application framework in use, there may already be
    a valid OpenID Id Token. Alternatively, a developer may possess a set of client credentials. Both approaches are described below. In both cases, a client object
    will be needed:

----------------------
var CLIENT = SolidClient.getClient();
----------------------

* Using an existing ID Token

    All interactions with Solid resources happen in the context of a <<<Session>>>. If an existing Id Token is available, the <<<Session>>> can use that value. In this
    case, it will be the responsibility of the application framework to refresh the Id Token upon expiration.

----------------------
var session = OpenIdSession.ofIdToken(idToken);
var client = CLIENT.session(session);
----------------------

* Using OAuth2 Client Credentials

    Using <<<client_credentials>>>, an app developer can create a session that automatically refreshes upon token expiration.

----------------------
var session = OpenIdSession.ofClientCredentials(issuer, clientId, clientSecret, authMethod);
var client = CLIENT.session(session);
----------------------

    With this <<<session>>> object, one can perform normal CRUD operations on Solid resources.
    Please note that, with <<<SolidClient>>>, all operations are asynchronous. For synchronous operations, use <<<SolidSyncClient>>>.

----------------------
var playlist = client.read(uri, Playlist.class);

playlist.thenAccept(p -> {
    displayTitle(p.getTitle());
    displaySongs(p.getSongs());
}).toCompletableFuture().join();
----------------------

    One may also create new resources.

----------------------
var playlist = new Playlist(uri);
playlist.setTitle("Jazz Collection");
playlist.addSong(song1);
playlist.addSong(song2);

client.create(playlist).toCompletableFuture().join();
-----------------------

    Or update existing resources.

-----------------------
var playlist = client.read(uri, Playlist.class);

playlist.thenCompose(p -> {
    p.setTitle("Bossa Nova");
    p.removeSong(song1);
    p.addSong(song3);
    return client.update(p);
}).toCompletableFuture().join();
-----------------------

    Or delete resources.

-----------------------
client.delete(uri).toCompletableFuture().join();
-----------------------

    One can use the provided Solid classes to list resources across a user's storage locations.

-----------------------
session.getPrincipal().ifPresent(webid ->
    client.send(Request.newBuilder(webid).header("Accept", "text/turtle").build(),
            WebIdBodyHandlers.ofWebIdProfile(webid))
        .thenApply(Response::body)
        .thenAccept(profile ->
            profile.getStorage().stream().forEach(storage -> {
                LOGGER.info("Storage: {}", storage);
                client.read(storage, SolidContainer.class).thenAccept(s ->
                        s.getContainedResources().forEach(r ->
                            LOGGER.info("Resource: {}", r.getIdentifier())))))
        .toCompletableFuture().join());
-----------------------

* Example applications

** A sample Web Application

    The {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/examples/webapp/package-summary.html}web app example}} is a Quarkus application implementing a similar pattern to look up a user's WebID profile and then display the contents of a user's storage.

    To set up the example application the following configuration values need to be added for this to work properly:

---------------------
quarkus.oidc.auth-server-url=<URL of Solid-OIDC server>
quarkus.oidc.client-id=<URL of Client Identifier>
---------------------

    Remark: <<<client-id>>> is a {{{https://solidproject.org/TR/oidc#clientids-document}Client ID Document}}.

    The above configuration values are typically added to a <<<./config/application.properties>>> file in the directory where the application is run.

    To build the application, use this command:

---------------------
$ ./mvnw package
---------------------

    To run the application, use this command:

---------------------
$ java -jar examples/webapp/target/quarkus-app/quarkus-run.jar
---------------------

    The application will be available at <<<http://localhost:8080>>>.

** A sample CLI Application

     The {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/examples/webapp/package-summary.html}cli app example}} is a CLI utility application interacting with a Solid Storage. It is making use of OAuth2 Client Credentials to access the Pod Storage.
