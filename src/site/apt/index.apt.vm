Welcome to the ${project.name}

{{{https://inrupt.com}Inrupt}} provides the following Java client libraries to help developers create {{{https://solidproject.org/}Solid}} applications. Solid applications refer to applications that conform to the {{{https://solidproject.org/TR/protocol}Solid specifications}}.

Inrupt's Java Client Libraries

Inrupt's Java Client Libraries provide highly flexible, simple components that can be used in any Java application for {{{https://solidproject.org/TR/protocol}Solid}}. The libraries are composed of different modules that follow a layered architectural approach.  

*-------*-----------------*--------*--------------*
|| Layer || Module function || Module || Description  ||
*-------*-----------------*--------*--------------*
| The Core Modules Layer | {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/package-summary.html}api}}     | | An interface only layer used by all modules. |
*-------*-----------------*--------*--------------*
|  | HTTP interaction    |    {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/httpclient/package-summary.html}httpclient}}    | Http client based on the java.net implementation. |
*-------*-----------------*--------*--------------*
|  | HTTP interaction      |    {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/okhttp/package-summary.html}okhttp}}    | Http client based on the OK HTTP implementation. |
*-------*-----------------*--------*--------------*
|  | JSON processing     |    {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/jackson/package-summary.html}jackson}}    | JSON processing based on jackson. |
*-------*-----------------*--------*--------------*
|  | JSON processing     |    {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/jsonb/package-summary.html}jsonb}}    | JSON processing that used the JSON-B library. |
*-------*-----------------*--------*--------------*
|  | RDF processing     |    {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/jena/package-summary.html}jena}}    | RDF processing based on the Jena implementation. |
*-------*-----------------*--------*--------------*
|  | RDF processing     |    {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/rdf4j/package-summary.html}rdf4j}}    | JSON processing based on the RDF4J implementation. |
*-------*-----------------*--------*--------------*
|  | Authentication & authorization     |    {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/openid/package-summary.html}openid}}    | Authentication logic based on OpenID & OAuth specification. |
*-------*-----------------*--------*--------------*
|  | Authentication & authorization     |    {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/uma/package-summary.html}uma}}    | Authorization logic based on UMA specification. |
*-------*-----------------*--------*--------------*
| Domain-Specific Modules Layer | core     |        | Provides default implementation ready to be used. |
*-------*-----------------*--------*--------------*
|  | solid     |        | Solid resource & container handlers. |
*-------*-----------------*--------*--------------*
|  | {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/vc/package-summary.html}vc}}     |        | VC-API interfaces used in Solid. |
*-------*-----------------*--------*--------------*
|  | {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/webid/package-summary.html}webid}}     |        | Solid WebID handler. |
*-------*-----------------*--------*--------------*
| Utility Modules | {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/vocabulary/package-summary.html}vocabulary}}     |        | Provides convenience objects for Solid-related identifiers. |
*-------*-----------------*--------*--------------*
|  | {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/test/package-summary.html}test}}     |        | Common tests for the library modules. |
*-------*-----------------*--------*--------------*
| Modules with Code Example | {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/demo/quarkus/package-summary.html}demo}}     |        | A Quarkus demo application. |
*-------*-----------------*--------*--------------*
Inrupt's Java Client modules and layers

Getting started

    * Quarkus demo

    The demo module contains a Quarkus application to look up a user's WebID profile and then display the contents of a user's storage.

    To setup the exampel application the following configuration values need to be added for this to work properly:

    +---------------------
    quarkus.oidc.auth-server-url=<URL of Solid-OIDC server>
    quarkus.oidc.client-id=<URL of Client Identifier>
    +---------------------

    These configuration values are typically added to a `./config/application.properties` file in the directory where the application is run.

    To run the application, use this command:

    +---------------------
    $ java -jar demo/quarkus/target/quarkus-app/quarkus-run.jar
    +---------------------

    The application will be available at `http://localhost:8080`.

    * Example code

    First, we assume we have an existing `testResource` which points to the root container of a Pod (a Pod's storage). And we also assume we have an authenticated `session`. Something like in the following code:
    +---------------------
    var webid = URI.create((String) claim);
    var session = client.session(OpenIdSession.ofIdToken(jwt.getRawToken()));
    +---------------------
    For an extensive example how to get to these resources, see the {Quarkus demo}.
    
    Further we exemplify how a user can create a Solid resource and add a boolean triple to it. We make use of the Jena implementation for RDF processing. Remark: The `createDeleteInsertSparqlQuery` is constructing a sparql DELETE DATA and INSERT DATA string based on the two provided lists. 
    +---------------------
    final var newResource = testResource + "e2e-test-subject";
    final var newResourceURL = URI.create(testResource + "e2e-test-subject");
    final var predicate = "https://example.example/predicate";

    //we create the Solid resource if it does not exist
    final Request requestCreateIfNotExist = Request.newBuilder(newResourceURL)
            .header("Content-Type", "text/turtle")
            .header("If-None-Match", "*")
            .header("Link", "<" + LDP.Resource + ">; rel=\"type\"")
            .PUT(Request.BodyPublishers.noBody())
            .build();
    final Response<Void> resp = session.send(requestCreateIfNotExist, Response.BodyHandlers.discarding());
    if (resp.statusCode() != 204) {
        throw new InruptClientException("Failed to create solid resource at " + newResource); 
    }

    //if the resource already exists -> we get all its statements and filter out the ones we are interested in
    List<Statement> statementsToDelete = new ArrayList<>();
    if (resp.statusCode() == 412) { 
        final Request requestRdf = Request.newBuilder(newResourceURL).GET().build();
        final var responseRdf = session.send(requestRdf, JenaBodyHandlers.ofModel());
        statementsToDelete = responseRdf.body().listStatements(createResource(newResource), createProperty(predicate), (org.apache.jena.rdf.model.RDFNode)null).toList();
    }

    //we create a list of statements we want to add
    final List<Statement> statementsToAdd = List.of(createStatement(createResource(newResource), createProperty(predicate), ResourceFactory.createTypedLiteral(true)));

    final var ur = UpdateFactory.create(createDeleteInsertSparqlQuery(statementsToDelete, statementsToAdd));
    final Request requestPatch = Request.newBuilder(newResourceURL)
        .header("Content-Type", "application/sparql-update")
        .method("PATCH", JenaBodyPublishers.ofUpdateRequest(ur)).build();
    final var responsePatch = session.send(requestPatch, Response.BodyHandlers.discarding());
    if (responsePatch.statusCode() != 204) {
        throw new InruptClientException("Faild to create a new resource at " + newResource); //create appropriate exception
    }
    +---------------------

Using the libraries

    * Authentication & Authorization
    Authentication & authorization are processes part of verifying the identity of an agent. To access private data on Solid Pods, you must authenticate as a user/agent who has been granted appropriate access to that data.

    Inrupt's Java Client Libraries provides different layers of abstraction to be used when needing authentication and authorization.
    
        ** OpenID
        The {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/openid/package-summary.html}openid module}} builds on top of the {{{which itself builds on the OAuth 2.0 authorization framework.}OpenID Connect} standards, which itself builds on the {{{https://datatracker.ietf.org/doc/html/rfc6749}OAuth 2.0}} authorization framework.

        For code examples how to make use of this authentication module visit the {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/openid/package-summary.html}javadoc documentation}}.

        ** UMA
        The {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/uma/package-summary.html}uma module}} builds on top of the {{{https://docs.kantarainitiative.org/uma/wg/rec-oauth-uma-grant-2.0.html}UMA}} specification. 

    * Solid Resource HTTP client

        ** HttpClient

        ** OkHttp

    * RDF Graph handler

        ** RDF4J

        ** Jena

    * JSON handler

        ** JSON-B

        ** Jackson

    * WebID profile


