Inrupt's Java Client Libraries

  {{{https://inrupt.com}Inrupt}} provides the following Java client libraries to help developers create {{{https://solidproject.org}Solid}} applications. These libraries provide highly flexible, simple components that can be used in any Java application for {{{https://solidproject.org/TR/protocol}Solid}}. The libraries are composed of different modules that follow a layered architectural approach.

*-------*-----------------*--------*--------------*
|| Layer || Module function || Module || Description |
*-------*-----------------*--------*--------------*
|| Interface Layer | Central abstractions | {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/package-summary.html}api}} | A layer that defines all the central abstrctions used by the Java Client Libraries. |
*-------*-----------------*--------*--------------*
|| Core Modules Layer | HTTP interaction    |    {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/httpclient/package-summary.html}httpclient}}    | Http client based on the java.net implementation. |
*-------*-----------------*--------*--------------*
|  | HTTP interaction      |    {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/okhttp/package-summary.html}okhttp}}    | Http client based on the OK HTTP implementation. |
*-------*-----------------*--------*--------------*
|  | JSON processing     |    {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/jackson/package-summary.html}jackson}}    | JSON processing based on jackson. |
*-------*-----------------*--------*--------------*
|  | JSON processing     |    {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/jsonb/package-summary.html}jsonb}}    | JSON processing that uses the JSON-B library. |
*-------*-----------------*--------*--------------*
|  | RDF processing     |    {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/jena/package-summary.html}jena}}    | RDF processing based on the Jena implementation. |
*-------*-----------------*--------*--------------*
|  | RDF processing     |    {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/rdf4j/package-summary.html}rdf4j}}    | RDF processing based on the RDF4J implementation. |
*-------*-----------------*--------*--------------*
|  | Authentication & authorization     |    {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/openid/package-summary.html}openid}}    | Authentication logic based on OpenID & OAuth specification. |
*-------*-----------------*--------*--------------*
|  | Authentication & authorization     |    {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/uma/package-summary.html}uma}}    | Authorization logic based on UMA specification. |
*-------*-----------------*--------*--------------*
|| Domain-Specific Modules Layer | Implementation of all API interfaces | {{{corehttps://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/core/package-summary.html}core}} | Provides a default Client implementation. |
*-------*-----------------*--------*--------------*
|  | Solid resource data models | {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/solid/package-summary.html}solid}} | Solid resource & container handlers. |
*-------*-----------------*--------*--------------*
|  | Verifiable Credential data models | {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/vc/package-summary.html}vc}} | VC-API interfaces used in Solid. |
*-------*-----------------*--------*--------------*
|  | WebID Profile data models | {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/webid/package-summary.html}webid}} | Solid WebID handler. |
*-------*-----------------*--------*--------------*
|| Utility Modules | RDF Vocabulary terms | {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/vocabulary/package-summary.html}vocabulary}} | Provides convenience objects for Solid-related identifiers. |
*-------*-----------------*--------*--------------*
|  | Test utilities | {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/test/package-summary.html}test}} | Common tests shared across library modules. |
*-------*-----------------*--------*--------------*
|| Example Applications |  | {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/demo/quarkus/package-summary.html}demo}} | A Quarkus demo application. |
*-------*-----------------*--------*--------------*

* Getting started

** Example code

    An app developer will first need to consider how a user creates an authenticated session. Depending on the application framework in use, there may already be
    a valid OpenID Id Token. Alternatively, a developer may possess a set of client credentials. Both approaches are described below. In both cases, a client object
    will be needed:

----------------------
var CLIENT = SolidClient.getClient();
----------------------

*** Using an existing ID Token

    All interactions with Solid resources happen in the context of a <<<Session>>>. If an existing Id Token is available, the <<<Session>>> can use that value. In this
    case, it will be the responsibility of the application framework to refresh the Id Token upon expiration.

----------------------
var session = OpenIdSession.ofIdToken(idToken);
var client = CLIENT.session(session);
----------------------

*** Using OAuth2 Client Credentials

    Using <<<client_credentials>>>, an app developer can create a session that automatically refreshes upon token expiration.

----------------------
var session = OpenIdSession.ofClientCredentials(issuer, clientId, clientSecret, authMethod);
var client = CLIENT.session(session);
----------------------

    With this <<<session>>> object, one can perform normal CRUD operations on Solid resources. Please note that all operations are asynchronous.

----------------------
var playlist = client.read(uri, Playlist.class);

playlist.thenRun(p -> {
    displayTitle(p.getTitle());
    displaySongs(p.getSongs());
}).toCompletableFuture().join();
----------------------

    One may also create new resources.

----------------------
var playlist = new Playlist(uri);
playlist.setTitle("Jazz Collection");
playlist.addSong(song1);
playlist.addSong(song2);

client.create(playlist).toCompletableFuture().join();
-----------------------

    Or update existing resources.

-----------------------
var playlist = client.read(uri, Playlist.class);

playlist.thenCompose(p -> {
    p.setTitle("Bossa Nova");
    p.removeSong(song1);
    p.addSong(song3);
    return client.update(p);
}).toCompletableFuture().join();
-----------------------

    Or delete resources.

-----------------------
client.delete(uri).toCompletableFuture().join();
-----------------------

    One can use the provided Solid classes to list resources across a user's storage locations.

-----------------------
session.getPrincipal().ifPresent(webid ->
    client.send(Request.newBuilder(webid).header("Accept", "text/turtle").build(),
            WebIdBodyHandlers.ofWebIdProfile(webid))
        .thenApply(Response::body)
        .thenAccept(profile ->
            profile.getStorage().stream().forEach(storage -> {
                LOGGER.info("Storage: {}", storage);
                client.read(storage, SolidContainer.class).thenAccept(s ->
                        s.getContainedResources().forEach(r ->
                            LOGGER.info("Resource: {}", r.getIdentifier())))))
        .toCompletableFuture().join());
-----------------------

** Quarkus demo

    The {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/demo/quarkus/package-summary.html}demo module}} contains a Quarkus application implementing a similar pattern to look up a user's WebID profile and then display the contents of a user's storage.

    To set up the example application the following configuration values need to be added for this to work properly:

---------------------
quarkus.oidc.auth-server-url=<URL of Solid-OIDC server>
quarkus.oidc.client-id=<URL of Client Identifier>
---------------------

    Remark: <<<client-id>>> is a {{{https://solidproject.org/TR/oidc/#clientids-document}Client ID Document}}.

    The above configuration values are typically added to a <<<./config/application.properties>>> file in the directory where the application is run.

    To build the application, use this command:

---------------------
$ ./mvnw package
---------------------

    To run the application, use this command:

---------------------
$ java -jar demo/quarkus/target/quarkus-app/quarkus-run.jar
---------------------

    The application will be available at <<<http://localhost:8080>>>.

* Inrupt's Java Client modules and layers

  Inrupt's Java Client Libraries are composed of different modules that follow a layered architectural approach. Next we will provide an overview of these layers and how to make use of them.
  Make sure to visit the {{{./apidocs/}Documentation}} part for a javadoc style documentation with code examples for each module. 

* Interface Layer

** API

  The {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/package-summary.html}api module}} is an interface module used in mostly all following modules. The provided abstractions are implemented in higher level modules and can be used to plug in your own application specific implementations.

  There are several specific parts to the API module

  * Classes and interfaces used by developers writing Solid apps. These form the {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/package-summary.html}standard api}} of the Inrupt Java Client Libraries.

  * Classes and interfaces used by developers extending these client libraries. These interfaces comprise the {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/spi/package-summary.html}spi}} package and will be used for implementing support for a new JSON processor or HTTP client library.

  * Classes and interfaces used by developers building domain abstractions. These interfaces comprise the {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/rdf/package-summary.html}rdf}} package and are helpful for translating RDF data into specific Java classes.

* Core Modules Layer

  The next listed modules make up what we call the core modules layer of the Java Client Libraries. See these modules as basic building blocks on top of which further Solid and then application specific implementations can be developed. 

** Authentication & Authorization

  Authentication & authorization are processes part of verifying the identity of an agent. To access private data on Solid Pods, you must authenticate as a user/agent who has been granted appropriate access to that data.

  Inrupt's Java Client Libraries provide different layers of abstraction to be used when needing authentication and authorization.
  Low level modules include OpenID and UMA.

*** OpenID

  The {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/openid/package-summary.html}openid module}} builds on top of the {{{which itself builds on the OAuth 2.0 authorization framework.}OpenID Connect}} standards, which itself builds on the {{{https://datatracker.ietf.org/doc/html/rfc6749}OAuth 2.0}} authorization framework.

*** UMA

  The {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/uma/package-summary.html}uma module}} builds on top of the {{{https://docs.kantarainitiative.org/uma/wg/rec-oauth-uma-grant-2.0.html}UMA}} specification.

  Remark: Higher level abstractions that help with authentication and authorization are part of the Core module. This module includes classes such as <<<DefaultClient>>> which encapsulates a reactive authentication approach. This class makes use of the basic authentication and authorization modules to automatically determine the preferred authentication and authorization the server needs and then negotiate the according tokens and access. See {{{example-code}Example code}} for how to use the DefaultClient.

** HTTP interaction

  For interacting with a Solid server through a HTTP client there are two low level modules available: the java.net {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/httpclient/package-summary.html}HttpClient}} or the {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/okhttp/package-summary.html}OkHttp}}.

*** HttpClient

  This module build on top of the {{{https://docs.oracle.com/en/java/javase/11/docs/api/java.net.http/java/net/http/package-summary.html}java.net.http.HttpClient}}.
  For example code and usage visit the javadoc at the {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/httpclient/package-summary.html}httpclient module}}.

*** OkHttp

  This module builds on top of the {{{https://square.github.io/okhttp/}OkHttp}} client.
  For example code and usage visit the javadoc at the {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/okhttp/package-summary.html}okhttp module}}.

** RDF processing

*** RDF4J

  {{{https://rdf4j.org/documentation/}RDF4J}} is one of the widely known RDF processing libraries for Java.
  For example code and usage visit the javadoc at the {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/rdf4j/package-summary.html}rdf4j module}}.

*** Jena

  {{{https://jena.apache.org/documentation/javadoc.html}Jena}} is one of the widely known RDF processing libraries for Java.
  For example code and usage visit the javadoc at the {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/jena/package-summary.html}jena module}}.

** JSON processing

*** JSON-B

  {{{https://javaee.github.io/jsonb-spec/getting-started.html}JSON-B}} is providing a Java API for JSON Bindings.
  Visit the {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/jsonb/package-summary.html}jsonb module}} javadocs for examples of how to make use of it in Inrupt's Java Client Libraries.

*** Jackson

  {{{https://github.com/FasterXML/jackson}Jackson}} is the Java JSON library that helps you parse and work with JSON.
Visit the {{{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/jackson/package-summary.html}jackson module}} javadocs for examples of how to make use of it in Inrupt's Java Client Libraries.

* Domain-specific Modules Layer

** Implementation of all API interfaces

  The {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/core/package-summary.html}core module}} provides implementations of all API interfaces. Among which also a client implementation for use with Solid resources.

** Solid resource data models

  The {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/solid/package-summary.html}solid module}} provides handlers for Solid resources and containers.

** WebID Profile data models

  The {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/webid/package-summary.html}webid module}} provides a handler for working with the Solid WebId profile document.

** Verifiable Credential data models

  The {{{https://inrupt.github.io/solid-client-java/apidocs/com/inrupt/client/vc/package-summary.html}vc module}} exposes VC-API interfaces used in Solid.
